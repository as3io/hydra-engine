type Query {
  allOrganizations(pagination: PaginationInput = {}, sort: OrganizationSortInput = {}): OrganizationConnection!
  organization(input: ModelIdInput!): Organization!
}

type Mutation {
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(input: UpdateOrganizationInput!): Organization!
  inviteUserToOrg(input: OrganizationInviteInput!): OrganizationMember!
  acknowledgeUserInvite(token: String!): OrganizationMember!
}

enum OrganizationSortField {
  name
  createdAt
  updatedAt
}

type Organization {
  id: String!
  name: String!
  description: String
  createdAt: Date
  updatedAt: Date
  photoURL: String
  members: [OrganizationMember]
  projects: [Project]
}

type OrganizationMember {
  user: User!
  role: RolesForOrganization
  projectRoles: [ProjectRole]
  invitedAt: Date
  acceptedAt: Date
}

type ProjectRole {
  project: Project!
  role: RolesForProject
}

type OrganizationConnection {
  totalCount: Int!
  edges: [OrganizationEdge]!
  pageInfo: PageInfo!
}

type OrganizationEdge {
  node: Organization!
  cursor: Cursor!
}

input OrganizationInviteInput {
  email: String!
  givenName: String!
  familyName: String!
  role: RolesForOrganization!
  projectRoles: [ProjectInviteRoleInput]
}

input ProjectInviteRoleInput {
  projectId: String!
  role: RolesForProject!
}

input OrganizationSearchInput {
  typeahead: OrganizationTypeAheadInput!
}

input OrganizationTypeAheadInput {
  field: OrganizationTypeAheadField!
  term: String!
}

enum OrganizationTypeAheadField {
  name
  email
}

input OrganizationSortInput {
  field: OrganizationSortField! = name
  order: Int! = -1
}

input CreateOrganizationInput {
  name: String!
}

input UpdateOrganizationInput {
  name: String!
  description: String
  photoURL: String
}
