type Query {
  user(input: ModelIdInput!): User!
  allUsers(pagination: PaginationInput = {}, sort: UserSortInput = {}): UserConnection!
  currentUser: User
  checkSession(input: SessionTokenInput!): Authentication
}

type Mutation {
  createUser(input: CreateUserInput!): User
  loginUser(input: LoginInput!): Authentication
  deleteSession: String
}

enum UserSortField {
  name
  createdAt
  updatedAt
}

type Session {
  id: String!
  uid: String!
  cre: Int!
  exp: Int!
  token: String!
}

type Authentication {
  user: User!
  session: Session!
}

type User {
  id: String!
  email: String!
  givenName: String
  familyName: String
  logins: Int
  photoURL: String
}

type UserConnection {
  totalCount: Int!
  edges: [UserEdge]!
  pageInfo: PageInfo!
}

type UserEdge {
  node: User!
  cursor: Cursor!
}

input NewUserPayloadInput {
  email: String!
  password: String!
  givenName: String!
  familyName: String!
}

input CreateUserInput {
  # captcha: String
  payload: NewUserPayloadInput
}

input SessionTokenInput {
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

input UserSortInput {
  field: UserSortField! = createdAt
  order: Int! = -1
}
