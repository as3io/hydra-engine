type Query {
  allProjects(pagination: PaginationInput = {}, sort: ProjectSortInput = {}): ProjectConnection!
  project(input: ModelIdInput!): Project!
}

type Mutation {
  createProject(input: CreateProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
}

enum ProjectSortField {
  name
  createdAt
  updatedAt
}

type Project {
  id: String!
  name: String
  description: String
  createdAt: Date
  updatedAt: Date
  organization: Organization!
}

type ProjectConnection {
  totalCount: Int!
  edges: [ProjectEdge]!
  pageInfo: PageInfo!
}

type ProjectEdge {
  node: Project!
  cursor: Cursor!
}

input ProjectSortInput {
  field: ProjectSortField! = name
  order: Int! = -1
}

input CreateProjectInput {
  name: String!
  description: String
}

input UpdateProjectInput {
  id: String!
  payload: UpdateProjectPayload!
}

input UpdateProjectPayload {
  name: String!
  description: String
}
